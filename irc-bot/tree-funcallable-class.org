#+TITLE: tree-funcallable-class.org
#+LINK: mop http://www.alu.org/mop/dictionary.html#%s
#+LINK: cl-net-project http://common-lisp.net/project/%s
#+LINK: asdf http://www.cliki.net/%s
#+LINK: cliki http://www.cliki.net/%s

This is my fourth rewrite of nisp's command parsing system. In short the
routing system takes care of translating "github show foo" into terms
that lisp's [[ansi:generic-function][generic-function]] can handle and deal with. Commands are
structured like a tree, with each level having sub-nodes until a leaf is
reached. This leaf is what executes the behavior of the command.

* Prior attempts
  1) First attempt was a crude first pass that did not take advantage of
     the [[http://www.alu.org/mop/contents.html][Metaobject protocol]]. What I did was define
     =+command-routing-functions+= which contained an array of 16
     methods, each one taking one more command argument then the
     last. If the command was not a leaf, we simply went back and
     checked =+command-routing-functions+= again for another generic
     function with one more argument, repeating this cycle until we hit
     a leaf or until we failed to find a node or a leaf.[fn:1]
  2) My second attempt made use of the [[http://www.alu.org/mop/contents.html][Metaobject protocol]], but did not
     get very far or got close to being an acceptable replacement for
     =+command-routing-functions+=. What it did do was teach me about
     how the [[http://www.alu.org/mop/contents.html][Metaobject protocol]] really worked for selecting applicable
     methods. The functions and classes defined attempted to follow the
     examples given for [[mop:make-method-lambda]], focusing on figuring out
     how [[mop:call-next-method]] and [[mop:call-method]] interacted to pass an
     additional parameter to be used. With the extra parameter I defined
     =this-method=, which provided a pointer to the method class from
     inside of the function while it was called. A working example of
     this one is in a test case at [[file:tests.lisp::Testing%20the%20test%20generic%20function][test-gf test case]].
  3) The last attempt is at [[file:test-funcallable-class.lisp::defclass%20command%20generic%20function%20standard%20generic%20function][command-generic-function]]. This class and
     related specializer: [[file:test-funcallable-class.lisp::defclass%20command%20specializer%20specializer][command-specializer]] got to the point that a
     top level[fn:2] command could be recognized and called. However this did
     not handle all corner cases, and does not handle any levels below
     the top level.

* Current attempt
  The source will be at [[file:tree-funcallable-class.lisp]] and the tests
  will be at [[file:tree-funcallable-class-tests.lisp]].

  The dependencies will be the following:
  - [[cl-net-project:closer/closer-mop.html][closer/closer-mop.html]], [[http://common-lisp.net/project/closer/repos/closer-mop/][darcs repository]],
    [[cl-net-darcs-web:closer-mop][darcs web repository view]], [[asdf:closer-mop]]
  - [[cl-net-project:iterate][iterate]], [[cl-net-project:iterate/doc/index.html][manual]], [[cl-net-darcs-web:iterate][darcs web repository view]],
    [[asdf:iterate]]
  - [[cl-net-project:alexandria][alexandria]], [[cl-net-project:alexandria/draft/alexandria.pdf][manual]],  [[cl-net-project:alexandria/darcs/alexandria/][darcs repository]], [[asdf:alexandria]]

* MOP
  Our concept is making a generic function act like a network where each
  method can invoke [[ansi:call-next-method][call-next-method]] to traverse further down the tree as
  well as traverse laterally as in normal combinations.

*** Generic function call
***** compute-applicable-methods-using-classes
      For now we do not attempt to use this to do any sort of
      caching. Its one less thing to have a bug in at this time.

***** compute-applicable-methods
      Primary workhorse. Find all methods that have our tree-specializer
      in the first argument. Maybe at some point we can allow multiple
      trees to be specialized on at one time, but that might get
      computationally difficult and turn out to be a monster with too
      many heads to track.

      A valid first argument is a single [[ansi:symbol][symbol]], a [[ansi:string][string]] or a list of
      symbols.

******* preprocess-arglist
        Takes a [[ansi:generic-function][generic-function]] and the arglist as would be passed to
        [[*compute-applicable-methods]] and modifies the arglist into
        something that the standard applicable method computation can
        handle.

        After this method gets called, arglist processing may assume that
        the correct symbols and packages are in place. Calling
        [[ensure-tree-symbol]] after this point is a waste of computation
        time.

***** compute-effective-method
      Pick out which method is the one we want to start with.

*** Method definition
***** sb-pcl:make-method-specializers-form :non_portable:sbcl:
      This needs to return something that tells sbcl how to get a copy of
      our specializer.

      Unmodified we can [[ansi:trace]] this [[ansi:generic-function]] and watch
      what happens when we invoke [[ansi:defmethod]].

      It is critically important that all parts of the returned form be
      [[ansi:read][readable]]. This means no sharpsign < objects for where there is no
      defined [[ansi:make-load-form][make-load-form]]. Failure to follow this constraint results in
      some rather spurious and sometimes difficult to trace errors from
      sbcl.

******* Example (no tree-specializer)
        First we need to [[ansi:trace]] =sb-pcl:make-method-specializers-form=
        to see what happens

        #+BEGIN_SRC lisp
          (trace sb-pcl:make-method-specializers-form)
        #+END_SRC

        Then we define a random fake method, so we use [[en:foo][foo]] as our method
        name. [fn:3]

        #+BEGIN_SRC lisp
          (defmethod foo ((arg1 (eql 1)) (arg2 integer))
            (+ arg1 arg2))
        #+END_SRC

        Call out to =make-method-specializers-form=:
        : (SB-PCL:MAKE-METHOD-SPECIALIZERS-FORM
        :   #<STANDARD-GENERIC-FUNCTION FOO (1)>
        :   #<STANDARD-METHOD #<STANDARD-METHOD {1000883061}> {1000883061}>
        :   ((EQL 1) INTEGER) #<NULL-LEXENV>)

        This is what we get back:
        : SB-PCL:MAKE-METHOD-SPECIALIZERS-FORM returned
        :   (LIST (SB-MOP:INTERN-EQL-SPECIALIZER 1) (FIND-CLASS 'INTEGER))

        This returned list is what tells the lisp implentation [fn:4] how
        to look up the specializers for [[mop:compute-applicable-methods][compute-applicable-methods]]. So in
        effect to add our own custom specializer, we just need to inform
        the implentation how to look it up.

******* General implementation details
        On sbcl, in order to get method specializers to work without sbcl
        complaining that the new specializer type is invalid, we must
        remove all information about our new specializer from
        =SPECIALIZER-NAMES= [fn:5] and pass this shorter list to
        [[ansi:call-next-method][call-next-method]]. The result of [[ansi:call-next-method][call-next-method]] then gets
        modified to have the new specializer inserted in the right places.

        There are at least several valid approaches to this topic:
          1) We can specify that for the whole class of generic functions
             ,generic methods or both that the specializer must always be
             in a particular position in the lambda list.
          2) We could parse out where the specializers are, record their
             locations in the lambda list using some sort of index along
             with what values they had, and use this index to re-insert
             the specializers after [[ansi:call-next-method][call-next-method]].
          3) Completely forgo [[ansi:call-next-method][call-next-method]] and handle all the cases
             ourselves. I personally find this method very unappealing as
             we must replicate work that the implentation does for us.

***** ensure-generic-function
***** ensure-generic-function-using-class
***** make-instance
      Especially note the keyword =:generic-function-class=
***** instance initialization
******* initialize-instance
******* reinitialize-instance
******* compute-discriminating-function
***** Build method function
******* make-method-lambda
***** Obtain method metaobject
******* make-instance
******* generic-function-method-class
******* initialize-instance
***** Add method to generic function
******* add-method
******* compute-discriminating-function
******* add-direct-method

*** Specializers
***** make-instance
******* TODO [#C] ensure-tree-symbol on tree-specializer init

***** intern-tree-specializer
      Takes two arguments; generic-function and path-list.

      The generic-function must be a [[tree-generic-function]] or a subclass
      of it.

      path-list is the direct path from the top of the tree down to
      whatever leaf or node is being referred to. At no point is it
      acceptable to skip levels.
* Performance
#+BEGIN_EXAMPLE
  I> (defmethod test-1 ((foo (eql 1)) bar) (list foo bar))
  STYLE-WARNING: Implicitly creating new generic function TEST-1.
  #<STANDARD-METHOD TEST-1 ((EQL 1) T) {10061B1741}>
  I> (h::clock (test-1 1 323) 100)
  ((:TIME 19/1000 "0.019") (:AVG 19/100000 "0.00019") (:RESULT 1 323))
  I> (h::clock (test-1 1 323) 1000)
  ((:TIME 0 "0.0") (:AVG 0 "0.0") (:RESULT 1 323))
  I> (h::clock (test-1 1 323) 1000)
  ((:TIME 0 "0.0") (:AVG 0 "0.0") (:RESULT 1 323))
  I> (h::clock (test-1 1 323) 10000)
  ((:TIME 1/1000 "0.001") (:AVG 1/10000000 "0.0000001") (:RESULT 1 323))
  I> (h::clock (test-1 1 323) 100000)
  ((:TIME 3/500 "0.006") (:AVG 3/50000000 "0.00000006") (:RESULT 1 323))
  I> (h::clock (test-1 1 323) 10000000)
  ((:TIME 1151/1000 "1.151") (:AVG 1151/10000000000 "0.0000001151")
   (:RESULT 1 323))
#+END_EXAMPLE

  Based on the above it is clear unmodified generic functions can do 10
  million calls in 1.15 seconds. Right now we are lucky to get 330 calls
  in 1 second with our modified setup which is based on the following
  method definition:

#+BEGIN_SRC lisp
  (defmethod test-tree-generic-function ((tree (eql "hi2")) arg1)
    (list tree arg1))
#+END_SRC

* Tasks
*** DONE Rename tree-specializer to network-tree-node
    CLOSED: [2010-02-27 Sat 18:48]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2010-02-27 Sat 18:48]
    :END:
    New name reflects new role
*** DONE Rename intern-tree-specializer to something else
    CLOSED: [2010-02-27 Sat 18:53]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2010-02-27 Sat 18:53]
    :END:
    We are not really... interning are we?

    Ok we are, but renaming this to INTERN-NETWORK-TREE-NODE
*** TODO Implement NEXT-NODE
    Needs to drop down to the next command.
*** TODO Implement NEXT-NODE-P
    Needs to tell us if we can drop to a next command without an error
*** TODO Implement CURRENT-NODE
    Tell us the =network-tree= we are at right now
*** TODO Implement PRINT-OBJECT for NETWORK-TREE
    Would be useful for reading debug output instead of seeing:
    : (eql #<network-tree ...>)
    with no useful information.

* Dictionary
*** tree-generic-function
    Our special [[ansi:generic-function][generic-function]] class that has as its single superclass
    the class [[ansi:standard-generic-function][standard-generic-function]], and is itself a
    [[ansi:funcallable-standard-class][funcallable-standard-class]].

    Each [[ansi:generic-function][generic-function]] created using this class will contain an
    additional slot called top-level-tree that is the root for
    tree-specializer nodes.

*** tree-specializer
    This is a single node in a network with the root in
    tree-generic-function. This specializer contains a hash table that
    points to more tree-specializer nodes.

*** tree-method
    Right now not too much special about this one other then it is the
    default method-class for tree-generic-function objects.

* Footnotes

[fn:1] Failure to find a node or a leaf means there was no method
defined for that particular command.

[fn:2] Top level commands are things like =!github=, =!test=. These do
not have commands under them. Some examples of that are: =!github show=,
=!test run=, =!test run all= and so on.

[fn:3] [[ansi:defgeneric][defgeneric]] is omitted for brevity only, in real code I try to use
them so I can take advantage of documentation strings.

[fn:4] Specifically sbcl, I'm hoping other lisp implentations are similar
enough that this kind of specialization can be ported to those
implentations as well with little hassle.

[fn:5] For sbcl, this is the 3rd parameter to
=sb-pcl:make-method-specializers-form=, for other lisps I don't know right
now what parameter this is. This parameter contains just information on
the specializers that we have to use to correctly intern and return a form
that sbcl will use to create the specializers list that gets used in
[[mop:compute-applicable-methods][compute-applicable-methods]].
