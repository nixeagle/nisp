#+TITLE: nisp-core

* Introduction
  nisp-core is a general purpose communications framework. Currently the
  only thing nisp-core works with well is irc. The required interfaces to
  be implemented for other protocols is not yet well defined, but doing so
  is a matter of specifying specific generic functions required for each
  connection class.

*** Installation
    You need a lisp, if you don't have one, a simple guide for setting
    sbcl and emacs up is [[http://github.com/nixeagle/nass/blob/master/doc/lisp-sbcl-intro.org][here]].

    Simple installation requires this repository to be cloned.
    : git clone git://github.com/nixeagle/nisp

    Then cd into the new repo and get all the sub-modules.
    : cd nisp/
    : git submodule update --init --recursive

    Your lisp configuration file needs to know about nisp/asdf. If you are
    on sbcl, you need to add this to your =~/.sbclrc=.
    : (pushnew "/path/to/nisp/asdf/" asdf:*central-registry* :test #'equal)

    In your lisp instance, run:
    : (asdf:load-system :nisp.i)

    Please note that some dependencies are not in the nisp repository, you
    will need to do =(asdf-install:install :package-name)= for each. The
    major offenders are =:closer-mop= and =:bordeaux-threads=.

*** Configuration
    A demonstration configuration file is in [[file:config-dist.lisp]]. This
    should be copied to [[file:config.lisp]] before doing
    =(require :nisp.i)=.

    The way the configuration is setup for each bot class is very likely
    to change in the next few version releases.

*** Extending
    This framework is designed to be very flexible and simple to
    program. Command syntax is very simple to pick up, a single example is
    enough to explain most simple to moderate cases.

    After configuration and a connection is established, try evaluating
    the following:
    : (in-package :nisp.i)
    : (defcommand test () (reply "it works!"))

    The connected bot should respond to !test with a reply of "it works".

    This currently marks the command as being in all plugins, be aware
    that in the next few releases work on full "plugin" support will
    complete.

    It is suggested for now that any extensions are loaded from
    config.lisp with some sort of statement looking like:
    : (load (merge-pathnames "plugin-name.lisp" +root-directory+)
    :       :if-does-not-exist nil)

    Using the action specifier in HANDLE-COMMAND is highly discouraged. It
    will be removed in future releases.

* License
  Some of the code in this repository will originate from cl-irc which
  can be retrieved from http://common-lisp.net/project/cl-irc/ and has
  been released under a BSD license. A copy of this license is at
  [[file:CL-IRC-LICENSE]].

  My modifications and extensions are released under the GNU GPLv3. A
  copy of this license is at [[file:COPYING]]

