#+CATEGORY: ft

This is a starting sketch up of functional-tests documentation. This
file is written with the help of org-mode, an emacs mode for doing
outlines.

* General idea
  Very basically this test framework assumes that each function is able
  to be tested on its own. Functions with side effects right now are not
  even on the radar. In short tests are always done on a single function
  at a time, specifiying inputs and expected outputs.

* API
*** TODO run-time OBJECT
***** TODO Method: run-time IO-RESULT

***** TODO Method: run-time IO-LOG

***** TODO Method: run-time IO-SET

***** TODO Method: run-time FBOUND-SYMBOL

***** TODO Method: run-time PACKAGE-SPEC

***** TODO Method: run-time <List of any of the above>

* Old code comments

;;;test framework idea: embed the test and expected results in the
;;;docstring itself in addition to more specialized tests by
;;;function. Even better is defining the tests seperately and modifying
;;;the function docstring to append examples and such. Thus the test
;;;becomes part of the function's own documentation. See
;;;(metatilities:depreciated) and (metatilities:make-obsolete) for how
;;;to do this. That way the tests become the documentation.

;;;It is very important that we do not get outside of testing *one*
;;;function at a time and gearing the tests to that. Doing them any
;;;other way just adds extra overhead that really does not need to
;;;exist. I don't want to type the function's name repeatedly, and I
;;;want the testcases to show up with (describe) for online
;;;help. Examples work very well with instructing others how a system is
;;;intended to be used.

;;; I am not 100% positive how functions with side effects will be
;;; tested other then attempting to isolate the sideeffects, maybe by
;;; using some of the work being done in :nisp-safe to allow a function
;;; to modify its own package without touching stuff otuside of it.

;;; Right from the start I want to indicate that heirarchical tests are
;;; not an intended feature outside of not running tests that use a
;;; function with a failed test. But that is not doing explicent nested
;;; test suites as done by those that follow the *Unit philosopy. Please
;;; understand I've tried 3 different frameworks extensively and none of
;;; them really fit the way lisp is designed. We don't have objects that
;;; *contain* methods. We have functions that act on objects. Test the
;;; *functions* and the object is tested as well.
;;;
;;; Tests will be placed into the same package as it is defined by
;;; default as the function it is testing. Alternatively an option will
;;; be given to put the tests in a seperate package defined by the
;;; application programmer. Running the tests is as easy as picking one
;;; test and running it, or running all tests in a single
;;; package. Grouping beyond that is to be left to the application
;;; programmer. Tools like mapc and others exist for this reason. I
;;; don't want to take too much control over the tests away from the
;;; programmer.

;;Require at minimum an object to hold the function being tested, This
;;can contain function wide profiling information (profile no profile),
;;test/pass results for the group of IOsets on the function as well as
;;what functions should be traced if tracing is turned on during the
;;test execution. We can determine dependency information somewhat from
;;the trace list, but be sure to include a way to mention a function
;;dependency without tracing.

;;an object that contains an IO set, which is one input matched to
;;expected error, output or value. Something like: (or output (xor error
;;value)) are valid combinations. The IO set could also log the results
;;for each call with that input as well as store if that set should be
;;traced or not on the input/output level. Of course use a few macros to
;;abstract msot of those ugly details away. A test should look something
;;like this:
